<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用typora编写hexo文章并添加图片</title>
    <link href="/2023/02/03/%E4%BD%BF%E7%94%A8typora%E7%BC%96%E5%86%99hexo%E6%96%87%E7%AB%A0%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/"/>
    <url>/2023/02/03/%E4%BD%BF%E7%94%A8typora%E7%BC%96%E5%86%99hexo%E6%96%87%E7%AB%A0%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/</url>
    
    <content type="html"><![CDATA[<h2 id="typora-配置"><a href="#typora-配置" class="headerlink" title="typora 配置"></a>typora 配置</h2><p>1、打开typora设置-&gt;图像，选择“复制到指定路径”，路径：项目路径&#x2F;source&#x2F;img&#x2F;${filename}</p><p><img src="/../img/%E4%BD%BF%E7%94%A8typora%E7%BC%96%E5%86%99hexo%E6%96%87%E7%AB%A0%E5%B9%B6%E6%B7%BB%E5%8A%A0%E5%9B%BE%E7%89%87/image-20230204090050149.png" alt="image-20230204090050149"></p><p>2、<strong>更换编辑器或者电脑后，需要重新配置</strong></p><h2 id="hexo配置"><a href="#hexo配置" class="headerlink" title="hexo配置"></a>hexo配置</h2><p>_config.yml中，下面的配置改为true</p><p>post_asset_folder: true</p><h2 id="已知问题"><a href="#已知问题" class="headerlink" title="已知问题"></a>已知问题</h2><h3 id="1、图片不能缩放"><a href="#1、图片不能缩放" class="headerlink" title="1、图片不能缩放"></a>1、图片不能缩放</h3><p>在typora中如果使用image标签缩放了图片，则无法在文章中展示</p>]]></content>
    
    
    <categories>
      
      <category>小技巧</category>
      
      <category>hexo</category>
      
    </categories>
    
    
    <tags>
      
      <tag>小技巧</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>rest_framework_simplejwt使用记录</title>
    <link href="/2023/02/03/rest-framework-simplejwt%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/"/>
    <url>/2023/02/03/rest-framework-simplejwt%E4%BD%BF%E7%94%A8%E8%AE%B0%E5%BD%95/</url>
    
    <content type="html"><![CDATA[<h2 id="0、基本说明"><a href="#0、基本说明" class="headerlink" title="0、基本说明"></a>0、基本说明</h2><p>[**rest_framework_simplejwt**](<a href="https://github.com/jazzband/djangorestframework-simplejwt">jazzband&#x2F;djangorestframework-simplejwt: A JSON Web Token authentication plugin for the Django REST Framework. (github.com)</a>) 是用于<a href="https://www.django-rest-framework.org/"><strong>Django REST</strong></a>的认证组件，用来进行用户的身份认证。</p><h2 id="1、安装配置-使用默认配置"><a href="#1、安装配置-使用默认配置" class="headerlink" title="1、安装配置(使用默认配置)"></a>1、安装配置(使用默认配置)</h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python">pip install djangorestframework <span class="hljs-comment"># 需要安装djangorestframework，simplejwt配合drf使用</span><br>pip install djangorestframework-simplejwt<br><br>注意：以下配置使用的是Django自带的用户模型，或者是通过继承django.contrib.auth.models.AbstractUser扩展的用户模型<br></code></pre></td></tr></table></figure><h3 id="settings设置"><a href="#settings设置" class="headerlink" title="settings设置"></a>settings设置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 在settings文件中的REST_FRAMEWORK中增加 DEFAULT_AUTHENTICATION_CLASSES对应的key-value</span><br><span class="hljs-comment"># 如果还未配置REST_FRAMEWORK，把下面整体复制进去即可</span><br><span class="hljs-comment"># 此处是告诉drf 使用哪个认证器进行认证校验</span><br>REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">&#x27;DEFAULT_AUTHENTICATION_CLASSES&#x27;</span>: (<br>        <span class="hljs-string">&#x27;rest_framework_simplejwt.authentication.JWTAuthentication&#x27;</span>,<br>    )<br>&#125;<br><br>simpleJWT的配置<br>SIMPLE_JWT = &#123;<br>    <span class="hljs-comment"># token过期时间</span><br>    <span class="hljs-string">&#x27;ACCESS_TOKEN_LIFETIME&#x27;</span>: timedelta(days=<span class="hljs-number">3</span>),<br>    <span class="hljs-comment"># token刷新过期时间</span><br>    <span class="hljs-string">&#x27;REFRESH_TOKEN_LIFETIME&#x27;</span>: timedelta(days=<span class="hljs-number">5</span>),<br><br>    <span class="hljs-string">&#x27;ROTATE_REFRESH_TOKENS&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-string">&#x27;BLACKLIST_AFTER_ROTATION&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-comment"># 更新user表的最后登录时间，不建议打开</span><br>    <span class="hljs-string">&#x27;UPDATE_LAST_LOGIN&#x27;</span>: <span class="hljs-literal">False</span>,<br>    <span class="hljs-comment"># token加密方法</span><br>    <span class="hljs-string">&#x27;ALGORITHM&#x27;</span>: <span class="hljs-string">&#x27;HS256&#x27;</span>,<br>    <span class="hljs-comment"># token加密的key</span><br>    <span class="hljs-string">&#x27;SIGNING_KEY&#x27;</span>: SECRET_KEY,<br>    <span class="hljs-string">&#x27;VERIFYING_KEY&#x27;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&#x27;AUDIENCE&#x27;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&#x27;ISSUER&#x27;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&#x27;JWK_URL&#x27;</span>: <span class="hljs-literal">None</span>,<br>    <span class="hljs-string">&#x27;LEEWAY&#x27;</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-comment"># token拼接方法： Bearer token</span><br>    <span class="hljs-string">&#x27;AUTH_HEADER_TYPES&#x27;</span>: (<span class="hljs-string">&#x27;Bearer&#x27;</span>,),<br>    <span class="hljs-comment"># 从哪个header获取token，注意 HTTP_ 这个前缀不要丢弃。如非必要不要改动</span><br>    <span class="hljs-string">&#x27;AUTH_HEADER_NAME&#x27;</span>: <span class="hljs-string">&#x27;HTTP_AUTHORIZATION&#x27;</span>,<br>    <span class="hljs-string">&#x27;USER_ID_FIELD&#x27;</span>: <span class="hljs-string">&#x27;id&#x27;</span>,<br>    <span class="hljs-string">&#x27;USER_ID_CLAIM&#x27;</span>: <span class="hljs-string">&#x27;user_id&#x27;</span>,<br>    <span class="hljs-string">&#x27;USER_AUTHENTICATION_RULE&#x27;</span>: <span class="hljs-string">&#x27;rest_framework_simplejwt.authentication.default_user_authentication_rule&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;AUTH_TOKEN_CLASSES&#x27;</span>: (<span class="hljs-string">&#x27;rest_framework_simplejwt.tokens.AccessToken&#x27;</span>,),<br>    <span class="hljs-string">&#x27;TOKEN_TYPE_CLAIM&#x27;</span>: <span class="hljs-string">&#x27;token_type&#x27;</span>,<br>    <span class="hljs-string">&#x27;TOKEN_USER_CLASS&#x27;</span>: <span class="hljs-string">&#x27;rest_framework_simplejwt.models.TokenUser&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;JTI_CLAIM&#x27;</span>: <span class="hljs-string">&#x27;jti&#x27;</span>,<br><br>    <span class="hljs-string">&#x27;SLIDING_TOKEN_REFRESH_EXP_CLAIM&#x27;</span>: <span class="hljs-string">&#x27;refresh_exp&#x27;</span>,<br>    <span class="hljs-string">&#x27;SLIDING_TOKEN_LIFETIME&#x27;</span>: timedelta(minutes=<span class="hljs-number">5</span>),<br>    <span class="hljs-string">&#x27;SLIDING_TOKEN_REFRESH_LIFETIME&#x27;</span>: timedelta(days=<span class="hljs-number">1</span>),<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="URL配置"><a href="#URL配置" class="headerlink" title="URL配置"></a>URL配置</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># 此库提供了两个视图，用来进行获取token(登录)，刷新token(延长token有效期)</span><br><span class="hljs-keyword">from</span> rest_framework_simplejwt.views <span class="hljs-keyword">import</span> (<br>    TokenObtainPairView,<br>    TokenRefreshView,<br>  TokenVerifyView<br>)<br><br>urlpatterns = [<br>    path(<span class="hljs-string">&#x27;api/token/&#x27;</span>, TokenObtainPairView.as_view(), name=<span class="hljs-string">&#x27;token_obtain_pair&#x27;</span>), <span class="hljs-comment"># 登录接口，返回token信息，也可以把url替换成容易理解的login/</span><br>    path(<span class="hljs-string">&#x27;api/token/refresh/&#x27;</span>, TokenRefreshView.as_view(), name=<span class="hljs-string">&#x27;token_refresh&#x27;</span>), <span class="hljs-comment"># 延长token有效期</span><br>    path(<span class="hljs-string">&#x27;api/token/verify/&#x27;</span>, TokenVerifyView.as_view(), name=<span class="hljs-string">&#x27;token_verify&#x27;</span>), <span class="hljs-comment"># 验证token</span><br>]<br></code></pre></td></tr></table></figure><h3 id="测试一下"><a href="#测试一下" class="headerlink" title="测试一下"></a>测试一下</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs shell">1、创建用户<br>2、测试<br>curl --location --request POST &#x27;http://127.0.0.1:8888/login/&#x27; \<br>--header &#x27;User-Agent: Apifox/1.0.0 (https://www.apifox.cn)&#x27; \<br>--header &#x27;Content-Type: application/json&#x27; \<br>--data-raw &#x27;&#123;<br>    &quot;username&quot;: &quot;用户名&quot;,<br>    &quot;password&quot;: &quot;密码&quot;<br>&#125;&#x27;<br>响应信息<br>&#123;<br>    &quot;refresh&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY3NTg1NDEyMiwiaWF0IjoxNjc1NDIyMTIyLCJqdGkiOiI0MDNiYTQ2N2VkNGU0ODllYmI2MWNlMjU5OTVkMTM3NiIsInVzZXJfaWQiOjF9.4tmyp53OSdmeo87KP-rNNlqUInFzbVSd7Dug3m3tu-A&quot;,<br>    &quot;access&quot;: &quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjc1NjgxMzIyLCJpYXQiOjE2NzU0MjIxMjIsImp0aSI6ImQwODRkZjlkMzMxZjQ4NjNhZWQyM2I1NjkwYjgxNmY2IiwidXNlcl9pZCI6MX0.mvRWtThlAU8-Kg79Dv2Q1vYbB10M7vz11vJoliLiOKE&quot;<br>&#125;<br>3、后续使用<br>在接口请求时，需要在header中添加两个kev-value<br>&#123;<br>&#x27;Content-Type: application/json&#x27;,<br>&#x27;Authorization&#x27;: Bearer(注意这里有空格) 响应信息中的access<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="2、自定义token信息返回"><a href="#2、自定义token信息返回" class="headerlink" title="2、自定义token信息返回"></a>2、自定义token信息返回</h2><h3 id="继承并重写序列化器"><a href="#继承并重写序列化器" class="headerlink" title="继承并重写序列化器"></a>继承并重写序列化器</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework_simplejwt.serializers <span class="hljs-keyword">import</span> TokenObtainPairSerializer<br><span class="hljs-keyword">from</span> rest_framework_simplejwt.settings <span class="hljs-keyword">import</span> api_settings<br><span class="hljs-keyword">from</span> django.contrib.auth.models <span class="hljs-keyword">import</span> update_last_login<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTokenObtainPairSerializer</span>(<span class="hljs-title class_ inherited__">TokenObtainPairSerializer</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">validate</span>(<span class="hljs-params">self, attrs</span>):<br>        data = <span class="hljs-built_in">super</span>().validate(attrs)<br><br>        refresh = self.get_token(self.user)<br><br>        data[<span class="hljs-string">&quot;refresh&quot;</span>] = <span class="hljs-built_in">str</span>(refresh)<br>        data[<span class="hljs-string">&quot;access&quot;</span>] = <span class="hljs-built_in">str</span>(refresh.access_token)<br>        <span class="hljs-comment"># 以下两个是自定义返回</span><br>        data[<span class="hljs-string">&quot;user_id&quot;</span>] = self.user.<span class="hljs-built_in">id</span><br>        data[<span class="hljs-string">&quot;username&quot;</span>] = self.user.username<br><br>        <span class="hljs-keyword">if</span> api_settings.UPDATE_LAST_LOGIN:<br>            update_last_login(<span class="hljs-literal">None</span>, self.user)<br><br>        <span class="hljs-keyword">return</span> data<br></code></pre></td></tr></table></figure><h3 id="继承并重写视图"><a href="#继承并重写视图" class="headerlink" title="继承并重写视图"></a>继承并重写视图</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework_simplejwt.serializers <span class="hljs-keyword">import</span> TokenRefreshSerializer<br><span class="hljs-keyword">import</span> MyTokenObtainPairSerializer<br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyTokenObtainPairView</span>(<span class="hljs-title class_ inherited__">TokenObtainPairView</span>):<br>    serializer_class = MyTokenObtainPairSerializer<br></code></pre></td></tr></table></figure><h3 id="配置URL"><a href="#配置URL" class="headerlink" title="配置URL"></a>配置URL</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">path(<span class="hljs-string">&#x27;mylogin/&#x27;</span>, MyTokenObtainPairView.as_view(), name=<span class="hljs-string">&#x27;login&#x27;</span>),<br></code></pre></td></tr></table></figure><h3 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python">curl --location --request POST <span class="hljs-string">&#x27;http://127.0.0.1:8888/mylogin/&#x27;</span> \<br>--header <span class="hljs-string">&#x27;User-Agent: Apifox/1.0.0 (https://www.apifox.cn)&#x27;</span> \<br>--header <span class="hljs-string">&#x27;Content-Type: application/json&#x27;</span> \<br>--data-raw <span class="hljs-string">&#x27;&#123;</span><br><span class="hljs-string">    &quot;username&quot;: &quot;admin&quot;,</span><br><span class="hljs-string">    &quot;password&quot;: &quot;admin&quot;</span><br><span class="hljs-string">&#125;&#x27;</span><br>响应信息<br>&#123;<br>    <span class="hljs-string">&quot;refresh&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoicmVmcmVzaCIsImV4cCI6MTY3NTkwNTQ2MSwiaWF0IjoxNjc1NDczNDYxLCJqdGkiOiI2YzBlNjA0YjU3OGM0ZDUzYmJjNzBlNmZjNzliZmYxZSIsInVzZXJfaWQiOjF9.hhx-yWM5OlLexndv9-GVJgUn5PyfKnASVLPb7v7MyTg&quot;</span>,<br>    <span class="hljs-string">&quot;access&quot;</span>: <span class="hljs-string">&quot;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ0b2tlbl90eXBlIjoiYWNjZXNzIiwiZXhwIjoxNjc1NzMyNjYxLCJpYXQiOjE2NzU0NzM0NjEsImp0aSI6ImRmZjJjODEyMGRjYTQyYTA4NjJmZDNjYmQ2OTFkOTAzIiwidXNlcl9pZCI6MX0.4IfdjH_3JCb3K0qAQu1KnpoxIOH8TpYGh15Os-R4VTI&quot;</span>,<br>    <span class="hljs-string">&quot;user_id&quot;</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-string">&quot;username&quot;</span>: <span class="hljs-string">&quot;admin&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="3、在代码中获取用户信息"><a href="#3、在代码中获取用户信息" class="headerlink" title="3、在代码中获取用户信息"></a>3、在代码中获取用户信息</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TestApi</span>(<span class="hljs-title class_ inherited__">APIView</span>):<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">get</span>(<span class="hljs-params">self, request, *args, **kwargs</span>):<br>      <span class="hljs-comment"># 当前请求的用户，是user表中的一个对象</span><br>      <span class="hljs-built_in">print</span>(request.user)<br>        <span class="hljs-comment"># 获取用户的id</span><br>        <span class="hljs-built_in">print</span>(request.user.pk)<br>        <span class="hljs-comment"># token中的信息，包含自定义的信息</span><br>        <span class="hljs-built_in">print</span>(request.auth)<br>        <span class="hljs-keyword">return</span> Response(&#123;<span class="hljs-string">&quot;msg&quot;</span>: <span class="hljs-string">&quot;test&quot;</span>&#125;)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Django</category>
      
      <category>jwt</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Django</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2023/02/03/hello-world/"/>
    <url>/2023/02/03/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
